import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Field;

@Target(value = ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@interface Table {
    String value();//对应映射表名
}

@Target(value = ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@interface SetProperty {
    String value();
}

@Table(value = "t_student")
class Student {
    @SetProperty(value = "t_id")
    private String id;
    @SetProperty(value = "t_name")
    private String name;
    @SetProperty(value = "t_sex")
    private String sex;

    /*public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }*/
}

/**
 * 使用自定义注解+JAVA反射机制实现ORM框架自动生成SQL语句
 */
public class AutoGetSQLDemo {
    public static void main(String[] args) {
        try {
            //定义StringBuffer来创建SQL
            StringBuffer sb = new StringBuffer();
            sb.append("SELECT ");
            //根据权限定名获取实体类的字节码文件
            Class<?> clazz = Class.forName("Student");
            //获取实体类的所有属性
            Field[] fields = clazz.getDeclaredFields();
            for (int i = 0; i < fields.length; i++) {
                //遍历获取具体每个属性
                Field field = fields[i];
                //获取当前属性自定义注解类
                SetProperty setProperty = field.getDeclaredAnnotation(SetProperty.class);
                //通过调用自定义注解的value()方法获取用户给定的值
                String value = setProperty.value();
                if (i < fields.length) {
                    //加上每个列名
                    sb.append(value);
                    //判断在每个列名后面再加,逗号
                    if (i < fields.length - 1) {
                        sb.append(",");
                    }
                }
            }
            //获取实体类用户给定的表名
            Table table = clazz.getDeclaredAnnotation(Table.class);
            //通过调用自定义注解的value()方法获取用户给定的值
            String table_name = table.value();
            sb.append(" FROM " + table_name);
            System.out.println("生成的SQL:" + sb.toString());
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}

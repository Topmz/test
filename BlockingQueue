import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

class Product3 extends Thread {
    private BlockingQueue blockingQueue;
    private volatile int ticter = 10;

    @Override
    public void run() {
        System.out.println("生产者启动...");
        while (ticter > 0) {
            System.out.println("正在生产...");
            boolean result = blockingQueue.offer("小熊" + ((10 - ticter) + 1));
            if (result) {
                System.out.println("生产小熊" + ((10 - ticter) + 1) + "成功...");
                ticter--;
            } else {
                System.out.println("生产失败...");
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("生产者结束...");
    }

    public Product3(BlockingQueue blockingQueue) {
        this.blockingQueue = blockingQueue;
    }
}

class Customer3 extends Thread {
    private BlockingQueue blockingQueue;
    private boolean flag = true;

    @Override
    public void run() {
        System.out.println("消费者启动...");
        while (flag) {
            try {
                System.out.println("消费者开始消费数据..");
                String data = (String) blockingQueue.poll(2, TimeUnit.SECONDS);
                if (data != null) {
                    System.out.println("消费者消费数据:" + data + "成功!");
                } else {
                    System.out.println("消费者消费数据:" + data + "失败!");
                    flag = false;
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("消费者结束...");
    }

    public Customer3(BlockingQueue blockingQueue) {
        this.blockingQueue = blockingQueue;
    }
}

public class ThreadBlockingQueue {
    public static void main(String[] args) {
        BlockingQueue blockingQueue = new LinkedBlockingQueue();
        Product3 p1 = new Product3(blockingQueue);
        Customer3 c1 = new Customer3(blockingQueue);
        p1.start();
        c1.start();
    }
}

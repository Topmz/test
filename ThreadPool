import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * 创建线程池的4种方式
 */
public class ThreadPool {
    public static void main(String[] args) {
        // 1.创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程
        //ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();
        //2.创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
        ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(3);
        //3.创建一个定长线程池，支持定时及周期性任务执行。
        ExecutorService newScheduledThreadPool = Executors.newScheduledThreadPool(3);
        //4.创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
        ExecutorService newSingleThreadExecutor = Executors.newSingleThreadExecutor();
        //注意: 结果依次输出，相当于顺序执行各个任务。
        for (int i = 0; i < 10; i++) {
            final int temp = i;
            newFixedThreadPool.execute(new Runnable() {

                @Override
                public void run() {
                    System.out.println(Thread.currentThread().getName() + ",i:" + temp);

                }
            });
        }
        //方法获得当前设备的CPU个数。
        System.out.println("CPU运行数量:"+Runtime.getRuntime().availableProcessors());
    }
}

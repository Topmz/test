import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

class UserDemo {
    private String id;
    private String name;

    public UserDemo() {
        System.out.println("无参构造函数...");
    }

    public UserDemo(String id, String name) {
        System.out.println("有参构造函数...");
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "id:" + id + "\tname:" + name;
    }
}

/**
 * JAVA反射机制
 */
public class ReflectDemo {
    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException {
        //1.获取反射类
        /*
        2.实例化后调用.getClass()
        UserDemo user = new UserDemo();
        Class<?> clazz = user.getClass();
        3.对象.class方法
        Class<?> clazz = UserDemo.class;
        */
        //默认是从该类的无参构造函数拿到字节码文件
        Class<?> clazz = Class.forName("UserDemo");
        //拿到所有属性的API
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            System.out.println("属性:" + field.getName());
        }
        //拿到所有方法API
        Method[] method = clazz.getDeclaredMethods();
        for (Method method1 : method) {
            System.out.println("方法:" + method1.getName());
        }
        //给私有属性赋值
        Field id = clazz.getDeclaredField("id");
        //为反射为私有属性赋值获取权限
        id.setAccessible(true);
        //为私有属性赋值，签名参数代表是为哪个类，后面是具体的数值
        id.set(clazz.newInstance(), "20");
        //2.实例化反射类
        /*UserDemo user = (UserDemo) clazz.newInstance();
        user.setId("10");
        user.setName("毛");
        System.out.println(user);*/
        //2.通过构造函数带有参数的方式
        /*Constructor<?> constructor = clazz.getConstructor(String.class, String.class);
        UserDemo user = (UserDemo) constructor.newInstance("10", "毛");*/
        UserDemo user = (UserDemo) clazz.newInstance();
        System.out.println(user);
    }
}
